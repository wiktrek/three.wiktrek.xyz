/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 model.glb -t 
*/

import * as THREE from 'three';
import React, { useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';

type ActionName = 'actionNameOne' | 'actionNameTwo';
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}
type GLTFResult = GLTF & {
  nodes: {
    Torus002: THREE.Mesh;
  };
  materials: {};
  animations: GLTFAction[];
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>
>;

export default function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/models/model.glb') as GLTFResult;
  return (
    <group {...props} dispose={null}>
      <mesh
        position={[0, 1, 0]}
        geometry={nodes.Torus002.geometry}
        material={nodes.Torus002.material}
        material-color={'orange'}
        scale={0.998}
      />
      <spotLight />
    </group>
  );
}

useGLTF.preload('/model.glb');
